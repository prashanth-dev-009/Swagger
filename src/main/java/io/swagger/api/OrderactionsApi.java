/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.24).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Body;
import io.swagger.model.Body1;
import io.swagger.model.Body2;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-02-09T16:59:56.539Z[GMT]")
public interface OrderactionsApi {

    @Operation(summary = "accept ship date change", description = "capture the client intent to accept ship date change", tags={ "order" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation"),
        
        @ApiResponse(responseCode = "400", description = "Invalid Input or order/item not found"),
        
        @ApiResponse(responseCode = "409", description = "Order/Item is not in the valid state to accept the date. This happens when the user already accepted the newEstimatedShipDate or the item is canceled.") })
    @RequestMapping(value = "/orderactions/acceptShipDate",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> acceptShipDate(@NotNull @Parameter(in = ParameterIn.QUERY, description = "ID of Order" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "orderId", required = true) Long orderId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "ID of item" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "itemId", required = true) Long itemId, @Parameter(in = ParameterIn.DEFAULT, description = "payload for accept ship date", required=true, schema=@Schema()) @Valid @RequestBody Body body);


    @Operation(summary = "cancel item", description = "cancel the item", tags={ "order" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation"),
        
        @ApiResponse(responseCode = "400", description = "Invalid Input or order/item not found"),
        
        @ApiResponse(responseCode = "409", description = "Order/Item is not in the valid state to cancel. This happens when item is shipped or already canceled.") })
    @RequestMapping(value = "/orderactions/cancelItem",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> cancelItem(@NotNull @Parameter(in = ParameterIn.QUERY, description = "ID of Order" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "orderId", required = true) Long orderId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "ID of item" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "itemId", required = true) Long itemId, @Parameter(in = ParameterIn.DEFAULT, description = "payload for cancel the item", required=true, schema=@Schema()) @Valid @RequestBody Body1 body);


    @Operation(summary = "cancel order", description = "cancel all the items in the order", tags={ "order" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation"),
        
        @ApiResponse(responseCode = "400", description = "Invalid Input or order/item not found"),
        
        @ApiResponse(responseCode = "409", description = "Order or few Items are not in the valid state to cancel. This happens when item is shipped or already canceled.") })
    @RequestMapping(value = "/orderactions/cancelOrder",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> cancelOrder(@NotNull @Parameter(in = ParameterIn.QUERY, description = "ID of Order" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "orderId", required = true) Long orderId, @Parameter(in = ParameterIn.DEFAULT, description = "payload for cancel the order", required=true, schema=@Schema()) @Valid @RequestBody Body2 body);

}

